@page "/createavailable"
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> userManager
@inject SignInManager<ApplicationUser> signInManager
@attribute [Authorize]

@if (signInManager.Context.User.Claims.Where(c => c.Type == "gruppe").FirstOrDefault().Value != "3")
{
	<EditForm Model="@available" OnValidSubmit="HandleValidSubmit">
	<DataAnnotationsValidator />
	<h4>Opret en Tid</h4>
	<hr />
	<ValidationMessage For="@(() => available.Date)" />
	<label class="control-label">Dato</label>
	<input type="datetime" class="form-control" @bind-value="available.Date" />

	<ValidationMessage For="@(() => available.EmployeeId)" />
	<label class="control-label">Tid</label>
	<select class="form-control" required @bind="available.EmployeeId">
		<option value="">Vælg en Læge/sygepjeleske</option>
		@if (Employees == null)
		{
			<option>Loading..</option>
		}
		else
		{
			@foreach (var employee in Employees)
			{
				<option value="@employee.Id">@employee.Firstname @employee.Lastname</option>
			}
		}
	</select>

	<button class="btn btn-success">Opret</button>
	<a href="/" class="btn btn-secondary">Annuller</a>

</EditForm>
}

@code {
	Available available = new Available();

	private List<ApplicationUser> Employees = new List<ApplicationUser>();

	protected override void OnInitialized()
	{
		List<ApplicationUser> applicationUsers = userManager.Users.ToList();

		Employees.AddRange(applicationUsers.Where(e => e.Role != 3));
	}

	public async Task HandleValidSubmit()
	{
		await _availableRepo.CreateAvailable(available);

		StateHasChanged();

		toastService.ShowSuccess("Tiden blev oprettet");
		NavigationManager.NavigateTo("/");
	}
}
