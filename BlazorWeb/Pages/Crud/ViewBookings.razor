@page "/viewbookings"
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> userManager
@inject SignInManager<ApplicationUser> signInManager

@if (signInManager.Context.User.Claims.Where(c => c.Type == "gruppe").FirstOrDefault().Value != "3")
{
	<div class="d-flex justify-content-center">
		<div class="col-9 form-group">
			<RadzenDataGrid AllowFiltering="false" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
						Data="@bookings" TItem="Booking" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
				<Columns>
					<RadzenDataGridColumn TItem="Booking" Property="Treatment.TreatmentName" Filterable="false" Title="Behandling" Width="100px" TextAlign="TextAlign.Center" />
					<RadzenDataGridColumn TItem="Booking" Property="Reason" Title="Begrundelse" Width="140px"/>
					<RadzenDataGridColumn TItem="Booking" Property="Available.Date" Title="Tid" Width="100px">
					</RadzenDataGridColumn>
					<RadzenDataGridColumn TItem="Booking" Property="IsApproved" Title="Godkend tiden" Width="140px">
						<Template Context="data">
							@if (data.IsApproved == true)
						{
							<input checked @bind-value="data.IsApproved" @onclick="() => UpdatdeBookingIsApproved(data, true)" type="checkbox" />
						}
						else
						{
							<input @bind-value="data.IsApproved" @onclick="() => UpdatdeBookingIsApproved(data, false)" type="checkbox" />
						}
						</Template>
					</RadzenDataGridColumn>
					<RadzenDataGridColumn TItem="Booking" Sortable="false" Filterable="false" Property="BookingId" Title="Rediger" Width="100px">
						<Template Context="data">
							<a class="btn btn-info" href="/editbooking/@data.BookingId">
							<i class="bi bi-pencil-square"></i>
						</a>
						</Template>
					</RadzenDataGridColumn>
					<RadzenDataGridColumn TItem="Booking" Sortable="false" Filterable="false" Property="BookingId" Title="Slet" Width="100px">
						<Template Context="data">
							<button class="btn btn-danger" @onclick="() => deleteOnClick(data.BookingId)">
								<i class="bi bi-trash"></i>
							</button>
						</Template>
					</RadzenDataGridColumn>
				</Columns>
			</RadzenDataGrid>
		</div>
	</div>
}

@code {
	private List<Booking> bookings = new List<Booking>();
	List<ApplicationUser> patients = new List<ApplicationUser>();

	protected override async Task OnInitializedAsync()
	{
		bookings = await _apiService.GetAsync<List<Booking>>($"{_config["Data:booking"]}");
		patients = userManager.Users.ToList();
	}

	private async Task UpdatdeBookingIsApproved(Booking booking, bool IsChecked)
	{
		booking.Treatment.Bookings = null;
		booking.Available.Booking = null;
		if (IsChecked == true)
		{
			booking.IsApproved = false;
		}
		else
		{
			booking.IsApproved = true;
			await _bookingRepo.SendEmailAsync(patients.FirstOrDefault(p => p.Id == booking.PatientId).Email, $"Booking af undersøgelse er godkendt", "", $"<html><body><H3>{patients.FirstOrDefault(p => p.Id == booking.PatientId).Firstname} {patients.FirstOrDefault(p => p.Id == booking.PatientId).Lastname}</H3><h3>{patients.FirstOrDefault(p => p.Id == booking.PatientId).Address}</h3><h1>Indkaldelse til undersøglese</h1><p>Du er blev indkaldt til en undersøgelse den {booking.Available.Date}</p><p>Hvis du ikke kan komme bedes du afmelde 24 timer inden.</p></body></html>");
		}
		await _apiService.PutAsync<Booking>($"{_config["Data:booking"]}", booking);
		bookings = await _apiService.GetAsync<List<Booking>>($"{_config["Data:booking"]}");
	}

	public async Task deleteOnClick(int bookingId)
	{
		bool res = await Jsruntime.InvokeAsync<bool>
		("confirm", $"Er du sikker på at du vil slette denne tid?");
		if (res)
		{
			await _bookingRepo.DeleteBooking(bookingId);
			toastService.ShowSuccess("Booking blev fjernet");
			bookings = await _apiService.GetAsync<List<Booking>>($"{_config["Data:booking"]}");
		}
	}
}
