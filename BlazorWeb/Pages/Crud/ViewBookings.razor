@page "/viewbookings"
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> userManager
@inject SignInManager<ApplicationUser> signInManager

@if (signInManager.Context.User.Claims.Where(c => c.Type == "gruppe").FirstOrDefault().Value != "3")
{
	<table class="table">
		<thead>
			<tr>
				<td>
					Behandling
				</td>
				<td>
					Begrundelse
				</td>
				<td>
					Tid
				</td>
				<td>
					Godkend tiden
				</td>
				<td>
				</td>
				<td>
				</td>
			</tr>
		</thead>
		<tbody>
			@foreach (var booking in bookings)
			{
				<tr>
					<td>
						@booking.Treatment.TreatmentName
					</td>
					<td>
						@booking.Reason
					</td>
					<td>
						@booking.Available.Date
					</td>
					<td>
						@if (booking.IsApproved == true)
						{
							<input checked @bind-value="booking.IsApproved" @onclick="() => UpdatdeBookingIsApproved(booking, true)" type="checkbox" />
						}
						else
						{
							<input @bind-value="booking.IsApproved" @onclick="() => UpdatdeBookingIsApproved(booking, false)" type="checkbox" />
						}

					</td>
					<td>
						<a class="btn btn-info" href="/editbooking/@booking.BookingId">
							<i class="bi bi-pencil-square"></i>
						</a>
					</td>
					<td>
						<button class="btn btn-danger" @onclick="() => deleteOnClick(booking.BookingId)">
							<i class="bi bi-trash"></i>
						</button>
					</td>
				</tr>
			}
		</tbody>

	</table>
}

@code {
	private List<Booking> bookings = new List<Booking>();
	List<ApplicationUser> patients = new List<ApplicationUser>();

	protected override void OnInitialized()
	{
		bookings = _bookingRepo.GetAllBookings().ToList();
		patients = userManager.Users.ToList();
	}

	private async Task UpdatdeBookingIsApproved(Booking booking, bool IsChecked)
	{
		if (IsChecked == true)
		{
			booking.IsApproved = false;
		}
		else
		{
			booking.IsApproved = true;
			await _bookingRepo.SendEmailAsync("amalie2410@gmail.com", $"Booking af undersøgelse er godkendt", "", $"<html><body><H3>{patients.FirstOrDefault(p => p.Id == booking.PatientId).Firstname} {patients.FirstOrDefault(p => p.Id == booking.PatientId).Firstname}</H3><h3>{patients.FirstOrDefault(p => p.Id == booking.PatientId).Address}</h3><h1>Indkaldelse til undersøglese</h1><p>Du er blev indkaldt til en undersøgelse den {booking.Available.Date}</p><p>Hvis du ikke kan komme bedes du afmelde 24 timer inden.</p></body></html>");
		}
		await _bookingRepo.UpdateBooking(booking);
		bookings = _bookingRepo.GetAllBookings().ToList();
	}

	public async Task deleteOnClick(int bookingId)
	{
		bool res = await Jsruntime.InvokeAsync<bool>
		("confirm", $"Er du sikker på at du vil slette denne tid?");
		if (res)
		{
			await _bookingRepo.DeleteBooking(bookingId);
			toastService.ShowSuccess("Booking blev fjernet");
			bookings = _bookingRepo.GetAllBookings().ToList();
		}
	}
}
