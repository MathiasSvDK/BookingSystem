@page "/viewavailables"
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> userManager
@inject SignInManager<ApplicationUser> signInManager
@attribute [Authorize]

@if (signInManager.Context.User.Claims.Where(c => c.Type == "gruppe").FirstOrDefault().Value != "3")
{
	<div class="d-flex justify-content-center">
		<div class="col-9 form-group">
			<RadzenDataGrid AllowFiltering="false" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
						Data="@availables" TItem="Available" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
				<Columns>
					<RadzenDataGridColumn TItem="Available" Property="Date" Filterable="false" Title="Dato" Width="100px" TextAlign="TextAlign.Center" />
					<RadzenDataGridColumn TItem="Available" Property="IsTaken" Title="Er tiden taget" Width="70px">
						<Template Context="data">
							@if (data.IsTaken == true)
							{
								<p>Ja</p>
							}
							else
							{
								<p>Nej</p>
							}
						</Template>
					</RadzenDataGridColumn>
					<RadzenDataGridColumn TItem="Available" Property="FirstName" Title="Læge/sygeplejeske" Width="140px">
						<Template Context="data">
							<p>@Employees.Where(e => e.Id == data.EmployeeId).FirstOrDefault().Firstname @Employees.Where(e => e.Id == data.EmployeeId).FirstOrDefault().Lastname</p>
						</Template>
					</RadzenDataGridColumn>
					<RadzenDataGridColumn TItem="Available" Sortable="false" Filterable="false" Property="AvailableId" Title="Rediger" Width="100px">
						<Template Context="data">
							<a class="btn btn-info" href="/editavailable/@data.AvailableId">
								<i class="bi bi-pencil-square"></i>
							</a>
						</Template>
					</RadzenDataGridColumn>
					<RadzenDataGridColumn TItem="Available" Sortable="false" Filterable="false" Property="AvailableId" Title="Slet" Width="100px">
						<Template Context="data">
							<button class="btn btn-danger" @onclick="() => deleteOnClick(data.AvailableId)">
								<i class="bi bi-trash"></i>
							</button>
						</Template>
					</RadzenDataGridColumn>
				</Columns>
			</RadzenDataGrid>
		</div>
	</div>
}

@code {
	private List<Available> availables = new List<Available>();
	private List<ApplicationUser> Employees = new List<ApplicationUser>();

	protected override async Task OnInitializedAsync()
	{
		DateTime today = DateTime.UtcNow;
		availables = await _apiService.GetAsync<List<Available>>($"{_config["Data:booking"]}/available");

		List<ApplicationUser> applicationUsers = userManager.Users.ToList();

		Employees.AddRange(applicationUsers.Where(e => e.Role != 3));

	}

	public async Task deleteOnClick(int availableId)
	{
		bool res = await Jsruntime.InvokeAsync<bool>
		("confirm", $"Er du sikker på at du vil slette denne tid?");
		if (res)
		{
			await _availableRepo.DeleteAvailable(availableId);
			toastService.ShowSuccess("Tiden blev fjernet");
			DateTime today = DateTime.UtcNow;
			availables = await _apiService.GetAsync<List<Available>>($"{_config["Data:booking"]}/available");

		}
	}

}