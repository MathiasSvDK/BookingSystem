@page "/edithospitalization/{hospitalizationId:int}"
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> userManager
@inject SignInManager<ApplicationUser> signInManager
@attribute [Authorize]


<div class="d-flex justify-content-center">
	<div class="col-9 form-group">
		@if (user.Role != 3)
		{
			<EditForm Model="@hospitalization" OnValidSubmit="HandleValidSubmit">

				<h4>Redigere indlæggelsen</h4>
				<hr />

				<ValidationMessage For="@(() => hospitalization.PatientId)" />
				<label class="control-label">Patient</label>
				<select class="form-control" required @bind="hospitalization.PatientId">
					<option value="">Vælg Patient</option>
					@if (patients == null)
					{
						<option>Loading..</option>
					}
					else
					{
						@foreach (var patient in patients.OrderBy(p => p.Firstname).ThenBy(p => p.Lastname))
						{
							<option value="@patient.Id">@patient.Firstname @patient.Lastname</option>
						}
					}
				</select>

				<ValidationMessage For="@(() => hospitalization.Reason)" />
				<label class="control-label">Begrundelse for indlæggelse</label>
				<input placeholder="Begrundelse for indlæggelse" class="form-control" @bind-value="hospitalization.Reason" />

				<ValidationMessage For="@(() => hospitalization.TimeOfHospitalized)" />
				<label class="control-label">Dato for indlæggelse</label>
				<RadzenDatePicker @bind-Value="hospitalization.TimeOfHospitalized" ShowTime="true" HoursStep="1" MinutesStep="5" Change=@(args => OnChange(args, "DatePicker with time", "dd/MM/yyyy HH:mm")) DateFormat="dd/MM/yyyy HH:mm" Class="form-control" />

				<ValidationMessage For="@(() => hospitalization.HospitalId)" />
				<label class="control-label">Hospital</label>
				<select class="form-control" required @bind=" hospitalization.HospitalId">
					<option value="">Vælg Hospital</option>
					@if (patients == null)
					{
						<option>Loading..</option>
					}
					else
					{
						@foreach (var hospital in hospitals.OrderBy(h => h.Name))
						{
							<option value="@hospital.Id">@hospital.Name</option>
						}
					}
				</select>

				<ValidationMessage For="@(() => hospitalization.IsDischarged)" />
				<label class="control-label">Er patienten udskrevet?</label>
				<input type="checkbox" @bind-value="hospitalization.IsDischarged" />
				<br />
				@if (hospitalization.IsDischarged == true)
				{
					<ValidationMessage For="@(() => hospitalization.TimeOfDischarged)" />
					<label class="control-label">Dato for udskrivelse af patient</label>
					<RadzenDatePicker Min="DateTime.Now" @bind-Value="hospitalization.TimeOfDischarged" ShowTime="true" HoursStep="1" MinutesStep="5" Change=@(args => OnChange(args, "DatePicker with time", "dd/MM/yyyy HH:mm")) DateFormat="dd/MM/yyyy HH:mm" Class="form-control">
						<FooterTemplate>
							<RadzenButton Click=@OnTodayClick Text="Today" />
						</FooterTemplate>
					</RadzenDatePicker>
				}
				<br />
				<button class="btn btn-success">Gem</button>
				<a href="/" class="btn btn-secondary">Annuller</a>

			</EditForm>
		}
	</div>
</div>


@code {

	[Parameter]
	public int hospitalizationId { get; set; }

	private Hospitalization hospitalization = new Hospitalization();

	public ApplicationUser user = new ApplicationUser();

	private List<ApplicationUser> patients = new List<ApplicationUser>();

	private List<Hospital> hospitals = new List<Hospital>();

	protected override async Task OnInitializedAsync()
	{
		hospitalization = await _hospitalizedRepo.GetHospitalizationByHospitalizationId(hospitalizationId);

		hospitals = _hospitalizedRepo.GetAllHospitals().ToList();

		user = await userManager.GetUserAsync(signInManager.Context.User);

		List<ApplicationUser> applicationUsers = userManager.Users.ToList();

		patients.AddRange(applicationUsers.Where(e => e.Role == 3));
	}

	void OnChange(DateTime? value, string name, string format)
	{
	}

	void OnTodayClick()
	{
		hospitalization.TimeOfDischarged = DateTime.Now;
	}

	public async Task HandleValidSubmit()
	{
		await _hospitalizedRepo.UpdateHospitalization(hospitalization);

		StateHasChanged();

		toastService.ShowSuccess("Indlæggelsen er blevet ændret");
		NavigationManager.NavigateTo("/");
	}
}
