@page "/editavailable/{availableId:int}"
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> userManager
@inject SignInManager<ApplicationUser> signInManager
@attribute [Authorize]

<div class="d-flex justify-content-center">
	<div class="col-9 form-group">
		@if (signInManager.Context.User.Claims.Where(c => c.Type == "gruppe").FirstOrDefault().Value != "3")
		{

			<EditForm Model="@available" OnValidSubmit="HandleValidSubmit">
				<DataAnnotationsValidator />
				<h4 class="text-center">Redigere tidspunkt</h4>
				<hr />
				<ValidationMessage For="@(() => available.Date)" />
				<label class="control-label">Dato</label>
				<RadzenDatePicker @bind-Value="available.Date" ShowTime="true" HoursStep="1" MinutesStep="5" Change=@(args => OnChange(args, "DatePicker with time", "dd/MM/yyyy HH:mm")) DateFormat="dd/MM/yyyy HH:mm" Class="form-control" />

				<ValidationMessage For="@(() => available.EmployeeId)" />
				<label class="control-label">Tid</label>
				<select class="form-control" required @bind="available.EmployeeId">
					<option value="">Vælg en Læge/sygepjeleske</option>
					@if (Employees == null)
					{
						<option>Loading..</option>
					}
					else
					{
						@foreach (var employee in Employees)
						{
							<option value="@employee.Id">@employee.Firstname @employee.Lastname</option>
						}
					}
				</select>

				<br>
				<button class="btn btn-success">Gem</button>
				<a href="/" class="btn btn-secondary">Annuller</a>

			</EditForm>
		}
	</div>
</div>

@code {
	[Parameter]
	public int availableId { get; set; }

	Available available = new Available();

	private List<ApplicationUser> Employees = new List<ApplicationUser>();

	protected override async Task OnInitializedAsync()
	{

		available = await _availableRepo.GetAvailableById(availableId);
		List<ApplicationUser> applicationUsers = userManager.Users.ToList();

		Employees.AddRange(applicationUsers.Where(e => e.Role != 3));

	}

	void OnChange(DateTime? value, string name, string format)
	{
	}

	public async Task HandleValidSubmit()
	{
		await _availableRepo.UpdateAvailable(available);

		StateHasChanged();
		toastService.ShowSuccess("Tiden blev ændret");
		NavigationManager.NavigateTo("/");
	}
}