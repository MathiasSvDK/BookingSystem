@page "/editavailable/{availableId:int}"
@inject NavigationManager NavigationManager


<EditForm Model="@available" OnValidSubmit="HandleValidSubmit">
	<DataAnnotationsValidator />
	<h4>Redigere tidspunkt</h4>
	<hr />
	<ValidationMessage For="@(() => available.Date)" />
	<label class="control-label">Dato</label>
	<input type="datetime" class="form-control" @bind-value="available.Date" />

	<ValidationMessage For="@(() => available.EmployeeId)" />
	<label class="control-label">Tid</label>
	<select class="form-control" required @bind="available.EmployeeId">
		<option value="">Vælg en Læge/sygepjeleske</option>
		@if (employees == null)
		{
			<option>Loading..</option>
		}
		else
		{
			@foreach (var employee in employees)
			{
				<option value="@employee.Id">@employee.Firstname @employee.Lastname</option>
			}
		}
	</select>

	<button class="btn btn-success">Gem</button>
	<a href="/" class="btn btn-secondary">Annuller</a>

</EditForm>

@code {
	[Parameter]
	public int availableId { get; set; }

	Available available = new Available();

	private List<Employee> employees = new List<Employee>();

	protected override async Task OnInitializedAsync()
	{
		available = await _availableRepo.GetAvailableById(availableId);
		employees = _hospitalRepo.GetAllEmployees().ToList();
	}

	public async Task HandleValidSubmit()
	{
		await _availableRepo.UpdateAvailable(available);

		StateHasChanged();
		toastService.ShowSuccess("Tiden blev ændret");
		NavigationManager.NavigateTo("/");
	}
}