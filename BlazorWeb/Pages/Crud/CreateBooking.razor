@page "/createbooking"
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> userManager
@inject SignInManager<ApplicationUser> signInManager
@attribute [Authorize]

<div class="d-flex justify-content-center">
	<div class="col-9 form-group">
		<EditForm Model="@booking" OnValidSubmit="HandleValidSubmit">
			<DataAnnotationsValidator />
			<h4 class="text-center">Booke en tid til undersøgelse</h4>
			<hr />
			@if (User.Role == 3)
			{
				<input hidden disabled @bind-value="booking.PatientId = User.Id"></input>
			}
			@if (User.Role != 3)
			{
				<ValidationMessage For="@(() => booking.PatientId)" />
				<label class="control-label">Patient</label>
				<div class="input-group">
					<input required placeholder="Indtast cpr nummer" @bind="patient.UserName" class="form-control">
					<div class="input-group-append">
						<button type="button" @onclick="GetPatient" class="btn btn-outline-secondary">
							<i class="bi bi-search"></i>
						</button>
					</div>
				</div>
				@if (patient.Firstname != null)
				{
					<label class="control-label">Patienten er: @patient.Firstname @patient.Lastname</label>
					<br />
				}

			}
			<ValidationMessage For="@(() => booking.TreatmentId)" />
			<label class="control-label">Behandling</label>
			<select class="form-control" required @bind="booking.TreatmentId">
				<option value="">Vælg Behandling</option>
				@if (treatments == null)
				{
					<option>Loading..</option>
				}
				else
				{
					@foreach (var treatment in treatments)
					{
						<option value="@treatment.TreatmentId">@treatment.TreatmentName</option>
					}
				}
			</select>

			<ValidationMessage For="@(() => booking.Reason)" />
			<label class="control-label">Begrundelse for behandling</label>
			<input placeholder="Begrundelse for behandling" class="form-control" @bind-value="booking.Reason" />

			<label class="control-label">Læge/sygepjeleske</label>
			<select @onchange="GetAvailable" class="form-control" required>
				<option value="">Vælg en Læge/sygepjeleske</option>
				@if (Employees == null)
				{
					<option>Loading..</option>
				}
				else
				{
					@foreach (var employee in Employees.OrderBy(e => e.Firstname).ThenBy(e => e.Lastname))
					{
						<option value="@employee.Id">@employee.Firstname @employee.Lastname</option>
					}
				}
			</select>

			@if (availables.Count != 0)
			{
				<ValidationMessage For="@(() => booking.AvailableId)" />
				<label class="control-label">Tid</label>
				<select class="form-control" required @bind="booking.AvailableId">
					<option value="">Vælg en Tid</option>
					@foreach (var available in availables)
					{
						<option value="@available.AvailableId">@available.Date</option>
					}
				</select>
			}
			else
			{
				<label>Denne Læge/sygepjeleske har ikke nogle ledige tider</label>
				<br />
			}
			<br />
			<button type="submit" class="btn btn-success">Opret</button>
			<a href="/" class="btn btn-secondary">Annuller</a>

		</EditForm>
	</div>
</div>


@code {
	private Booking booking = new Booking();

	private List<Available> availables = new List<Available>();
	private List<Treatment> treatments = new List<Treatment>();
	private ApplicationUser patient = new ApplicationUser();
	private List<ApplicationUser> Employees = new List<ApplicationUser>();

	public ApplicationUser User = new ApplicationUser();

	protected override async Task OnInitializedAsync()
	{
		User = await userManager.GetUserAsync(signInManager.Context.User);

		List<ApplicationUser> applicationUsers = userManager.Users.ToList();

		Employees.AddRange(applicationUsers.Where(e => e.Role != 3));

		treatments = _treatmentRepo.GetAllTreatments().ToList();
	}

	private void GetAvailable(ChangeEventArgs e)
	{
		DateTime today = DateTime.UtcNow;
		availables = _availableRepo.GetAllAvailablesNotTaken().Where(a => (a.EmployeeId == e.Value.ToString()) && (a.Date.Date >= today.Date)).ToList();
		if (availables.Count != 0)
		{
			booking.AvailableId = availables.FirstOrDefault().AvailableId;
		}
	}

	private async Task GetPatient()
	{
		patient = await userManager.FindByNameAsync(patient.UserName);
		@if (patient != null)
		{
			booking.PatientId = patient.Id;
		}
		else
		{
			patient = new ApplicationUser();
			toastService.ShowError("Kunne ikke find en patient med dette cpr nummer");
		}
	}

	public async Task HandleValidSubmit()
	{
		Available available = availables.Where(a => a.AvailableId == booking.AvailableId).FirstOrDefault();
		available.IsTaken = true;
		await _availableRepo.UpdateAvailable(available);

		await _bookingRepo.CreateBooking(booking);
		StateHasChanged();
		toastService.ShowSuccess("Booking blev oprettet");
		NavigationManager.NavigateTo("/");
	}
}
