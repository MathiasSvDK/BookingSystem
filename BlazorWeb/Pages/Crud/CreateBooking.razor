@page "/createbooking"
@inject NavigationManager NavigationManager
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> userManager

@if (true)
{
	<EditForm Model="@booking" OnValidSubmit="HandleValidSubmit">
	<DataAnnotationsValidator />
	<h4>Opret en Booking</h4>
	<hr />
	<ValidationMessage For="@(() => booking.TreatmentId)" />
	<label class="control-label">Behandling</label>
	<select class="form-control" required @bind="booking.TreatmentId">
		<option value="">Vælg Behandling</option>
		@if (treatments == null)
		{
			<option>Loading..</option>
		}
		else
		{
			@foreach (var treatment in treatments)
			{
				<option value="@treatment.TreatmentId">@treatment.TreatmentName</option>
			}
		}
	</select>

	<ValidationMessage For="@(() => booking.Reason)" />
	<label class="control-label">Begrundelse for behandling</label>
	<input placeholder="Fornavn" class="form-control" @bind-value="booking.Reason" />

	<label class="control-label">Læge/sygepjeleske</label>
	<select @onchange="GetAvailable" class="form-control" required>
		<option value="">Vælg en Læge/sygepjeleske</option>
		@if (Employees == null)
		{
			<option>Loading..</option>
		}
		else
		{
			@foreach (var employee in Employees)
			{
				<option value="@employee.Id">@employee.Firstname @employee.Lastname</option>
			}
		}
	</select>

	@if (availables != null)
	{
		<ValidationMessage For="@(() => booking.AvailableId)" />
		<label class="control-label">Tid</label>
		<select class="form-control" required @bind="booking.AvailableId">
			<option value="">Vælg en Tid</option>
			@foreach (var available in availables)
			{
				<option value="@available.AvailableId">@available.Date</option>
			}
		</select>
	}
	else if(availables.Count == 0)
	{
		<label>Denne Læge/sygepjeleske har ikke nogle ledige tider</label>
	}

	<button class="btn btn-success">Opret</button>
	<a href="/" class="btn btn-secondary">Annuller</a>

</EditForm>
}

@*
@if (false)
{
	<EditForm Model="@booking" OnValidSubmit="HandleValidSubmit">
	<DataAnnotationsValidator />
	<h4>Opret en Booking</h4>
	<hr />
	<ValidationMessage For="@(() => booking.PatientId)" />
	<label class="control-label">ApplicationUser</label>
	<select class="form-control" required @bind="booking.PatientId">
		<option value="">Vælg ApplicationUser</option>
		@if (Patients == null)
		{
			<option>Loading..</option>
		}
		else
		{
			@foreach (var patient in Patients)
			{
				<option value="@patient.Id">@patient.Firstname @patient.Lastname</option>
			}
		}
	</select>

	<ValidationMessage For="@(() => booking.TreatmentId)" />
	<label class="control-label">Behandling</label>
	<select class="form-control" required @bind="booking.TreatmentId">
		<option value="">Vælg Behandling</option>
		@if (treatments == null)
		{
			<option>Loading..</option>
		}
		else
		{
			@foreach (var treatment in treatments)
			{
				<option value="@treatment.TreatmentId">@treatment.TreatmentName</option>
			}
		}
	</select>

	<ValidationMessage For="@(() => booking.Reason)" />
	<label class="control-label">Begrundelse for behandling</label>
	<input placeholder="Fornavn" class="form-control" @bind-value="booking.Reason" />

	<label class="control-label">Læge/sygepjeleske</label>
	<select @onchange="GetAvailable" class="form-control" required>
		<option value="">Vælg en Læge/sygepjeleske</option>
		@if (Employees == null)
		{
			<option>Loading..</option>
		}
		else
		{
			@foreach (var employee in Employees)
			{
				<option value="@employee.Id">@employee.Firstname @employee.Lastname</option>
			}
		}
	</select>

	@if (availables != null)
	{
		<ValidationMessage For="@(() => booking.AvailableId)" />
		<label class="control-label">Tid</label>
		<select class="form-control" required @bind="booking.AvailableId">
			<option value="">Vælg en Tid</option>
			@foreach (var available in availables)
			{
				<option value="@available.AvailableId">@available.Date</option>
			}
		</select>
	}
	else if(availables.Count == 0)
	{
		<label>Denne Læge/sygepjeleske har ikke nogle ledige tider</label>
	}

	<button class="btn btn-success">Opret</button>
	<a href="/" class="btn btn-secondary">Annuller</a>

</EditForm>

}*@


@code {
	private Booking booking = new Booking();

	private List<Available> availables = new List<Available>();
	private List<Treatment> treatments = new List<Treatment>();
	private List<ApplicationUser> Patients = new List<ApplicationUser>();
	private List<ApplicationUser> Employees = new List<ApplicationUser>();

	protected override async Task OnInitializedAsync()
	{

		List<ApplicationUser> applicationUsers = userManager.Users.ToList();

		Patients.AddRange(applicationUsers.Where(e => e.Role == 0));

		Employees.AddRange(applicationUsers.Where(e => e.Role != 0));

		treatments = _treatmentRepo.GetAllTreatments().ToList();
	}

	private void GetAvailable(ChangeEventArgs e)
	{
		availables = _availableRepo.GetAllAvailablesNotTaken().Where(a => a.EmployeeId == e.Value.ToString()).ToList();
	}

	public async Task HandleValidSubmit()
	{
		await _bookingRepo.CreateBooking(booking);


		Available available = availables.Where(a => a.AvailableId == booking.AvailableId).FirstOrDefault();
		available.IsTaken = true;
		await _availableRepo.UpdateAvailable(available);

		StateHasChanged();
		toastService.ShowSuccess("Booking blev oprettet");
		NavigationManager.NavigateTo("/");
	}
}
