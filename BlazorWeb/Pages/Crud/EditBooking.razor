@page "/editbooking/{bookingId:int}"
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> userManager
@inject SignInManager<ApplicationUser> signInManager
@attribute [Authorize]

@if (booking != null)
{
	@if (booking.PatientId == User.Id || User.Role != 3)
	{
		<EditForm Model="@booking" OnValidSubmit="HandleValidSubmit">
			<DataAnnotationsValidator />
			<h4>Redigere en Booking</h4>
			<hr />
			@if (User.Role == 3)
			{
				<input hidden @bind-value="booking.PatientId"></input>
			}
			@if (User.Role != 3)
			{
				<label class="control-label">Patient</label>
				<select class="form-control" required @bind="booking.PatientId">
					<option selected value="@Patient.Id">@Patient.Firstname @Patient.Lastname</option>
					@if (Patients == null)
					{
						<option>Loading..</option>
					}
					else
					{
						@foreach (var patient in Patients.OrderBy(p => p.Firstname).ThenBy(p => p.Lastname))
						{
							<option value="@patient.Id">@patient.Firstname @patient.Lastname</option>
						}
					}
				</select>
			}
			<ValidationMessage For="@(() => booking.TreatmentId)" />
			<label class="control-label">Behandling</label>

			<select class="form-control" required @bind="booking.TreatmentId">
				<option value="">Vælg Behandling</option>
				@if (treatments == null)
				{
					<option>Loading..</option>
				}
				else
				{
					@foreach (var treatment in treatments)
					{
						<option value="@treatment.TreatmentId">@treatment.TreatmentName</option>
					}
				}
			</select>

			<ValidationMessage For="@(() => booking.Reason)" />
			<label class="control-label">Begrundelse for behandling</label>
			<input placeholder="Begrundelse for behandling" class="form-control" @bind-value="booking.Reason" />

			<label class="control-label">Læge/sygepjeleske</label>
			<select @onchange="GetAvailable" class="form-control" required>
				<option value="">Vælg en Læge/sygepjeleske</option>
				<option selected value="@Employee.Id">@Employee.Firstname @Employee.Lastname</option>
				@if (Employees == null)
				{
					<option>Loading..</option>
				}
				else
				{
					@foreach (var employee in Employees.OrderBy(e => e.Firstname).ThenBy(e => e.Lastname))
					{
						<option value="@employee.Id">@employee.Firstname @employee.Lastname</option>
					}
				}
			</select>

			@if (availables.Count != 0)
			{
				<ValidationMessage For="@(() => booking.AvailableId)" />
				<label class="control-label">Tid</label>
				<select class="form-control" required @bind="booking.AvailableId">
					<option value="">Vælg en Tid</option>
					@foreach (var available in availables)
					{
						<option value="@available.AvailableId">@available.Date</option>
					}
				</select>
			}
			else
			{
				<label>Denne Læge/sygepjeleske har ikke nogle ledige tider</label>
				<br />
			}
			<br />
			<button class="btn btn-success">Gem</button>
			<a href="/" class="btn btn-secondary">Annuller</a>

		</EditForm>
	}
}



@code {
	[Parameter]
	public int bookingId { get; set; }

	Available oldAvailable;
	Treatment oldTreatment;
	public ApplicationUser User = new ApplicationUser();

	private Booking booking;
	private List<Available> availables = new List<Available>();
	private List<Treatment> treatments = new List<Treatment>();
	public List<ApplicationUser> Patients = new List<ApplicationUser>();
	private List<ApplicationUser> Employees = new List<ApplicationUser>();
	private ApplicationUser Employee = new ApplicationUser();
	private ApplicationUser Patient = new ApplicationUser();

	protected override async Task OnInitializedAsync()
	{
		User = await userManager.FindByNameAsync(signInManager.Context.User.Identity.Name);
		booking = await _bookingRepo.GetBookingByBookingId(bookingId);
		oldAvailable = booking.Available;
		oldTreatment = booking.Treatment;
		Employee = await userManager.FindByIdAsync(oldAvailable.EmployeeId);
		Patient = await userManager.FindByIdAsync(booking.PatientId);

		availables.Add(oldAvailable);
		availables.AddRange(_availableRepo.GetAllAvailablesNotTaken().Where(a => a.EmployeeId == Employee.Id).ToList());
		treatments = _treatmentRepo.GetAllTreatments().ToList();

		List<ApplicationUser> applicationUsers = userManager.Users.ToList();

		Patients.AddRange(applicationUsers.Where(e => e.Role == 3));

		Employees.AddRange(applicationUsers.Where(e => e.Role != 3));
		Employees.Remove(Employee);
	}

	private void GetAvailable(ChangeEventArgs e)
	{
		if (e.Value.ToString() == Employee.Id)
		{
			availables.Clear();
			booking.AvailableId = oldAvailable.AvailableId;
			availables.Add(oldAvailable);
			availables.AddRange(_availableRepo.GetAllAvailablesNotTaken().Where(a => a.EmployeeId == Employee.Id).ToList());
		}
		else
		{
			availables = _availableRepo.GetAllAvailablesNotTaken().Where(a => a.EmployeeId == e.Value.ToString()).ToList();
			if (availables.Count != 0)
			{
				booking.AvailableId = availables.FirstOrDefault().AvailableId;
			}
		}

	}

	public async Task HandleValidSubmit()
	{
		Available available = availables.Where(a => a.AvailableId == booking.AvailableId).FirstOrDefault();
		Treatment treatment = treatments.Where(t => t.TreatmentId == booking.TreatmentId).FirstOrDefault();



		if (oldAvailable.AvailableId != available.AvailableId)
		{
			oldAvailable.IsTaken = false;
			await _availableRepo.UpdateAvailable(oldAvailable);
			available.IsTaken = true;
			await _availableRepo.UpdateAvailable(available);

			booking.Available = available;
		}

		if (oldTreatment.TreatmentId != treatment.TreatmentId)
		{
			booking.Treatment = treatment;
		}

		await _bookingRepo.UpdateBooking(booking);
		StateHasChanged();
		toastService.ShowSuccess("Booking blev ændret");
		NavigationManager.NavigateTo("/");
	}
}
