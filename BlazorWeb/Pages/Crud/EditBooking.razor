@page "/editbooking/{bookingId:int}"
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> userManager
@inject SignInManager<ApplicationUser> signInManager
@attribute [Authorize]


<div class="d-flex justify-content-center">
	<div class="col-9 form-group">
		@if (booking != null)
		{
			@if (booking.PatientId == User.Id || User.Role != 3)
			{
				<EditForm Model="@booking">
					<DataAnnotationsValidator />
					<h4 class="text-center">Redigere en Booking</h4>
					<hr />
					@if (User.Role == 3)
					{
						<input hidden @bind-value="booking.PatientId"></input>
					}
					@if (User.Role != 3)
					{
						<ValidationMessage For="@(() => booking.PatientId)" />
						<label class="control-label">Patient</label>
						<div class="input-group">
							<input required placeholder="Indtast cpr nummer" @bind="patient.UserName" class="form-control">
							<div class="input-group-append">
								<button type="button" @onclick="GetPatient" class="btn btn-outline-secondary">
									<i class="bi bi-search"></i>
								</button>
							</div>
						</div>
						@if (patient.Firstname != null)
						{
							<label class="control-label">Patienten er: @patient.Firstname @patient.Lastname</label>
							<br />
						}
					}
					<ValidationMessage For="@(() => booking.TreatmentId)" />
					<label class="control-label">Behandling</label>

					<select class="form-control" required @bind="booking.TreatmentId">
						<option value="">Vælg Behandling</option>
						@if (treatments == null)
						{
							<option>Loading..</option>
						}
						else
						{
							@foreach (var treatment in treatments)
							{
								<option value="@treatment.TreatmentId">@treatment.TreatmentName</option>
							}
						}
					</select>

					<ValidationMessage For="@(() => booking.Reason)" />
					<label class="control-label">Begrundelse for behandling</label>
					<input placeholder="Begrundelse for behandling" class="form-control" @bind-value="booking.Reason" />

					<label class="control-label">Læge/sygepjeleske</label>
					<select @onchange="GetAvailable" class="form-control" required>
						<option value="">Vælg en Læge/sygepjeleske</option>
						<option selected value="@Employee.Id">@Employee.Firstname @Employee.Lastname</option>
						@if (Employees == null)
						{
							<option>Loading..</option>
						}
						else
						{
							@foreach (var employee in Employees.OrderBy(e => e.Firstname).ThenBy(e => e.Lastname))
							{
								<option value="@employee.Id">@employee.Firstname @employee.Lastname</option>
							}
						}
					</select>

					@if (availables.Count != 0)
					{
						<ValidationMessage For="@(() => booking.AvailableId)" />
						<label class="control-label">Tid</label>
						<select class="form-control" required @bind="booking.AvailableId">
							<option value="">Vælg en Tid</option>
							@foreach (var available in availables)
							{
								<option value="@available.AvailableId">@available.Date</option>
							}
						</select>
					}
					else
					{
						<label>Denne Læge/sygepjeleske har ikke nogle ledige tider</label>
						<br />
					}
					<br />
					<button type="submit" @onclick="HandleValidSubmit" class="btn btn-success">Gem</button>
					<a href="/" class="btn btn-secondary">Annuller</a>

				</EditForm>
			}
		}
	</div>
</div>


@code {
	[Parameter]
	public int bookingId { get; set; }

	Available oldAvailable;
	Treatment oldTreatment;
	public ApplicationUser User = new ApplicationUser();

	private Booking booking;
	private List<Available> availables = new List<Available>();
	private List<Treatment> treatments = new List<Treatment>();
	private List<ApplicationUser> Employees = new List<ApplicationUser>();
	private ApplicationUser Employee = new ApplicationUser();
	private ApplicationUser patient = new ApplicationUser();

	protected override async Task OnInitializedAsync()
	{
		User = await userManager.FindByNameAsync(signInManager.Context.User.Identity.Name);
		booking = await _bookingRepo.GetBookingByBookingId(bookingId);
		oldAvailable = booking.Available;
		oldTreatment = booking.Treatment;
		Employee = await userManager.FindByIdAsync(oldAvailable.EmployeeId);
		patient = await userManager.FindByIdAsync(booking.PatientId);

		availables.Add(oldAvailable);
		availables.AddRange(_availableRepo.GetAllAvailablesNotTaken().Where(a => a.EmployeeId == Employee.Id).ToList());
		treatments = _treatmentRepo.GetAllTreatments().ToList();

		List<ApplicationUser> applicationUsers = userManager.Users.ToList();

		Employees.AddRange(applicationUsers.Where(e => e.Role != 3));
		Employees.Remove(Employee);
	}

	private void GetAvailable(ChangeEventArgs e)
	{
		if (e.Value.ToString() == Employee.Id)
		{
			availables.Clear();
			booking.AvailableId = oldAvailable.AvailableId;
			availables.Add(oldAvailable);
			availables.AddRange(_availableRepo.GetAllAvailablesNotTaken().Where(a => a.EmployeeId == Employee.Id).ToList());
		}
		else
		{
			availables = _availableRepo.GetAllAvailablesNotTaken().Where(a => a.EmployeeId == e.Value.ToString()).ToList();
			if (availables.Count != 0)
			{
				booking.AvailableId = availables.FirstOrDefault().AvailableId;
			}
		}

	}

	private async Task GetPatient()
	{
		patient = await userManager.FindByNameAsync(patient.UserName);
		@if (patient != null)
		{
			booking.PatientId = patient.Id;
		}
		else
		{
			patient = new ApplicationUser();
			toastService.ShowError("Kunne ikke find en patient med dette cpr nummer");
		}
	}

	public async Task HandleValidSubmit()
	{
		Available available = availables.Where(a => a.AvailableId == booking.AvailableId).FirstOrDefault();
		Treatment treatment = treatments.Where(t => t.TreatmentId == booking.TreatmentId).FirstOrDefault();



		if (oldAvailable.AvailableId != available.AvailableId)
		{
			oldAvailable.IsTaken = false;
			await _availableRepo.UpdateAvailable(oldAvailable);
			available.IsTaken = true;
			await _availableRepo.UpdateAvailable(available);

			booking.Available = available;
		}

		if (oldTreatment.TreatmentId != treatment.TreatmentId)
		{
			booking.Treatment = treatment;
		}

		await _bookingRepo.UpdateBooking(booking);
		StateHasChanged();
		toastService.ShowSuccess("Booking blev ændret");
		NavigationManager.NavigateTo("/");
	}
}
