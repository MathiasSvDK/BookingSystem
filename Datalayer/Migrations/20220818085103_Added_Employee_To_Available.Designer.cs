// <auto-generated />
using System;
using Datalayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Datalayer.Migrations
{
    [DbContext(typeof(BookingContext))]
    [Migration("20220818085103_Added_Employee_To_Available")]
    partial class Added_Employee_To_Available
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Datalayer.Entities.Available", b =>
                {
                    b.Property<int>("AvailableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsTaken")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("AvailableId");

                    b.ToTable("Availables");

                    b.HasData(
                        new
                        {
                            AvailableId = 1,
                            Date = new DateTime(2022, 8, 18, 10, 51, 2, 880, DateTimeKind.Local).AddTicks(8493),
                            EmployeeId = 0,
                            IsTaken = true
                        });
                });

            modelBuilder.Entity("Datalayer.Entities.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AvailableId")
                        .HasColumnType("int");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TreatmentId")
                        .HasColumnType("int");

                    b.HasKey("BookingId");

                    b.HasIndex("AvailableId")
                        .IsUnique();

                    b.HasIndex("TreatmentId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            BookingId = 1,
                            AvailableId = 1,
                            HospitalId = 1,
                            PatientId = 1,
                            Reason = "Check up",
                            TreatmentId = 1
                        });
                });

            modelBuilder.Entity("Datalayer.Entities.Treatment", b =>
                {
                    b.Property<int>("TreatmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TreatmentName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("TreatmentId");

                    b.ToTable("Treatments");

                    b.HasData(
                        new
                        {
                            TreatmentId = 1,
                            Description = "Blodprøver er blod udtaget fra en vene, som er de blodårer, der fører tilbage til hjertet. Blodet kan undersøges for sammensætning af salte, enzymer og proteiner, og i et vist omfang genetisk materiale. ",
                            TreatmentName = "Blodprøve"
                        });
                });

            modelBuilder.Entity("Datalayer.Entities.Booking", b =>
                {
                    b.HasOne("Datalayer.Entities.Available", "Available")
                        .WithOne("Booking")
                        .HasForeignKey("Datalayer.Entities.Booking", "AvailableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datalayer.Entities.Treatment", "Treatment")
                        .WithMany("Bookings")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Available");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("Datalayer.Entities.Available", b =>
                {
                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Datalayer.Entities.Treatment", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
